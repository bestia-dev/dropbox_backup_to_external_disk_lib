var searchIndex = new Map(JSON.parse('[\
["dropbox_backup_to_external_disk_lib",{"doc":"dropbox_backup_to_external_disk_lib","t":"JFKPPPPFPPPPGPPPPPPCHHCHHHHCOOCHHHHMCMHOOOOOOOOOOOOOHMCHHHHHCJFKNNNNNNNHHNNMMOOOOOOOOOOOOOMNNNHHHPPPPPPPPGPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNOONNNNNNNNNNIHHHHHHHHHHHOFIIIIIIINNOOOOONNHHHHNHHNHNNNOOHHNHHNNNOOOIHHHHHHO","n":["APP_STATE","AppConfig","AppStateMethods","DecryptionError","DropboxError","ErrorFromStr","ErrorFromString","FileTxt","FromUtf8Error","GetMetadataError","InquireError","IoError","LibError","ListFolderError","SerdeJsonError","TimestampError","UnknownError","VarError","WalkdirError","app_state_mod","compare_files","compare_folders","compare_mod","create_folders","download_from_list","download_one_file","encode_token","error_mod","file_path","file_txt","file_txt_mod","global_app_state","global_config","list_local","list_remote","load_keys_from_io","local_disk_mod","lock_proba","move_or_rename_local_files","path_list_destination_files","path_list_destination_folders","path_list_destination_readonly_files","path_list_ext_disk_base_path","path_list_for_create_folders","path_list_for_download","path_list_for_trash_files","path_list_for_trash_folders","path_list_just_downloaded","path_list_source_files","path_list_source_folders","path_powershell_script_change_modified_datetime","path_powershell_script_change_readonly","read_only_remove","ref_app_config","remote_dropbox_mod","shorten_string","sort_string_lines","test_connection","trash_files","trash_folders","utils_mod","APP_STATE","AppConfig","AppStateMethods","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","global_app_state","global_config","init","into","load_keys_from_io","lock_proba","path_list_destination_files","path_list_destination_folders","path_list_destination_readonly_files","path_list_ext_disk_base_path","path_list_for_create_folders","path_list_for_download","path_list_for_trash_files","path_list_for_trash_folders","path_list_just_downloaded","path_list_source_files","path_list_source_folders","path_powershell_script_change_modified_datetime","path_powershell_script_change_readonly","ref_app_config","try_from","try_into","type_id","compare_files","compare_folders","compare_lists_internal","DecryptionError","DropboxError","ErrorFromStr","ErrorFromString","FromUtf8Error","GetMetadataError","InquireError","IoError","LibError","ListFolderError","SerdeJsonError","TimestampError","UnknownError","VarError","WalkdirError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","init","into","source","to_string","try_from","try_into","type_id","FileTxt","borrow","borrow_mut","deref","deref_mut","drop","empty","file_name","file_path","file_path","file_txt","from","init","into","open_for_read","open_for_read_and_write","read_to_string","try_from","try_into","type_id","write_append_str","ThreadName","create_folders","get_content_hash","list_local","move_internal","move_or_rename_local_files","move_or_rename_local_files_internal_by_hash","move_or_rename_local_files_internal_by_name","read_only_remove","trash_files","trash_files_internal","trash_folders","vec","DirectoryIterator","FileList","FolderList","FolderListAndFileList","MasterKey","ThreadName","ThreadNum","TokenEnc","borrow","borrow_mut","buf","buf","buffer","client","cursor","deref","deref_mut","download_from_list","download_from_vec","download_internal","download_one_file","drop","dropbox_list_folder","encode_token","from","get_authorization_token","init","into","into_iter","len","len","list_remote","list_remote_folder","next","remote_content_hash","test_connection","try_from","try_into","type_id","vec","vec","vec","ThreadName","byte_pos_from_chars","println_to_ui_thread","println_to_ui_thread_with_thread_name","shorten_string","sort_list","sort_string_lines","vec"],"q":[[0,"dropbox_backup_to_external_disk_lib"],[61,"dropbox_backup_to_external_disk_lib::app_state_mod"],[94,"dropbox_backup_to_external_disk_lib::compare_mod"],[97,"dropbox_backup_to_external_disk_lib::error_mod"],[138,"dropbox_backup_to_external_disk_lib::file_txt_mod"],[159,"dropbox_backup_to_external_disk_lib::local_disk_mod"],[172,"dropbox_backup_to_external_disk_lib::remote_dropbox_mod"],[214,"dropbox_backup_to_external_disk_lib::utils_mod"],[222,"alloc::string"],[223,"std::sync::mpsc"],[224,"core::result"],[225,"std::path"],[226,"alloc::boxed"],[227,"std::sync::mutex"],[228,"core::fmt"],[229,"core::fmt"],[230,"humantime::date"],[231,"std::env"],[232,"alloc::string"],[233,"dropbox_sdk::generated::files"],[234,"dropbox_sdk"],[235,"walkdir::error"],[236,"std::io::error"],[237,"serde_json::error"],[238,"dropbox_sdk::generated::files"],[239,"core::error"],[240,"core::option"],[241,"std::io::error"],[242,"dropbox_sdk::default_client"],[243,"dropbox_sdk"]],"d":["Global variable to store the Application state. Global …","","This trait defines what functions must the bin project …","","","","","my object to work with text files","","","","","list of possible errors from this library","","","","","","","","compare list: the lists and produce list_for_download, …","compare folders and write folders to trash into …","","create new empty folders","download files from list It removes just_downloaded from …","download one file is calling internally download_from_vec …","This is a short-lived token, so security is not my primary …","I am using the crate thiserror to create an enum for all …","","","","","","the logic is in the LIB project, but all UI is in the CLI …","get remote list in parallel first get the first level of …","get encrypted authorization token from env var","Module contains all functions for local external disk.","get locked Mutex","Files are often moved or renamed After compare, the same …","","","","","","","","","","","","","","The backup files must not be readonly to allow copying the …","reference to app_config data","Module contains all the communication with the remote …","shorten path for screen to avoid word-wrap","sort string lines case insensitive","test authentication with dropbox.com experiment with …","Move to trash folder the files from list_for_trash_files. …","Move to trash folder the folders from …","A module with often used functions.","Global variable to store the Application state. Global …","","This trait defines what functions must the bin project …","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","get encrypted authorization token from env var","get locked Mutex","","","","","","","","","","","","","","reference to app_config data","","","","compare list: the lists and produce list_for_download, …","compare folders and write folders to trash into …","compare list: the lists must be already sorted for this to …","","","","","","","","","list of possible errors from this library","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","my object to work with text files","","","","","","empty the file","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","if file not exist, returns error","if file not exist, it creates it","This method is similar to fs::read_to_string, but instead …","","","","write str to file (append)","","create new empty folders","","the logic is in the LIB project, but all UI is in the CLI …","internal code to move file","Files are often moved or renamed After compare, the same …","","","The backup files must not be readonly to allow copying the …","Move to trash folder the files from list_for_trash_files. …","internal","Move to trash folder the folders from …","","iterator for Directory on remote Dropbox storage","","","","","","","","","","","","","","","","","download files from list It removes just_downloaded from …","","download one file with client object …","download one file is calling internally download_from_vec …","","dropbox function to list folders","This is a short-lived token, so security is not my primary …","Returns the argument unchanged.","read encoded token (from env), decode and return the …","","Calls <code>U::from(self)</code>.","","","","get remote list in parallel first get the first level of …","list remote folder","","get content_hash from remote","test authentication with dropbox.com experiment with …","","","","","","","","it is used for substring, because string slice are counted …","println_to_ui_thread sends the string to ui thread and …","println_to_ui_thread_with_thread_name sends the string to …","shorten path for screen to avoid word-wrap","sort list case insensitive","sort string lines case insensitive",""],"i":[0,0,0,5,5,5,5,0,5,5,5,5,0,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,10,0,10,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,10,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,0,0,3,3,10,10,3,3,3,3,3,3,3,3,3,3,3,3,3,10,3,3,3,0,0,0,5,5,5,5,5,5,5,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,0,36,36,40,41,36,36,36,36,36,0,0,0,0,36,0,0,36,0,36,36,36,40,41,0,0,36,0,0,36,36,36,42,43,44,0,0,0,0,0,0,0,45],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],3],[[6,[4,5]]]],[[[2,[1]],7,7,8,8],[[6,[4,5]]]],0,[[[2,[1]],9,8],[[6,[4,5]]]],[[[2,[[4,[1,1]]]],9,8,8,8],[[6,[4,5]]]],[[[2,[[4,[1,1]]]],9,9,8,8],[[6,[4,5]]]],[1,[[6,[[4,[1,1]],5]]]],0,0,0,0,[[],[[11,[10]]]],[[],3],[[[2,[[4,[1,1]]]],1,8,8,8],[[6,[4,5]]]],[[[2,[[4,[1,1]]]],8,8],[[6,[4,5]]]],[10,[[6,[[4,[1,1]],5]]]],0,[10,[[12,[1]]]],[[[2,[1]],9,8,8],[[6,[4,5]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],9,8,8],[[6,[4,5]]]],[10,3],0,[[7,13],1],[7,1],[[],[[6,[4,5]]]],[[[2,[1]],9,8],[[6,[4,5]]]],[[[2,[1]],9,8],[[6,[4,5]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[14,-1,[]],[14,-1,[]],[14,4],[[3,15],16],[-1,-1,[]],[[],[[11,[10]]]],[[],3],[[],14],[-1,-2,[],[]],[10,[[6,[[4,[1,1]],5]]]],[10,[[12,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[10,3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,17,[]],[[[2,[1]],3],[[6,[4,5]]]],[[[2,[1]],7,7,8,8],[[6,[4,5]]]],[[[2,[1]],9,9,9,9],[[6,[4,5]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[14,-1,[]],[14,-1,[]],[14,4],[[5,15],16],[[5,15],16],[18,5],[19,5],[20,5],[21,5],[22,5],[23,5],[24,5],[25,5],[26,5],[27,5],[28,5],[-1,-1,[]],[[],14],[-1,-2,[],[]],[5,[[30,[29]]]],[-1,1,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,17,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[14,-1,[]],[14,-1,[]],[14,4],[8,[[31,[4]]]],[8,1],[8,9],0,0,[-1,-1,[]],[[],14],[-1,-2,[],[]],[9,[[31,[8]]]],[9,[[31,[8]]]],[8,[[31,[1]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,17,[]],[[8,7],[[31,[4]]]],0,[[[2,[1]],9,8],[[6,[4,5]]]],[7,[[6,[1,5]]]],[[[2,[[4,[1,1]]]],1,8,8,8],[[6,[4,5]]]],[[[2,[1]],9,9],[[6,[4,5]]]],[[[2,[1]],9,8,8],[[6,[4,5]]]],[[[2,[1]],9,[32,[7]],[32,[7]]],[[6,[4,5]]]],[[[2,[1]],9,[32,[7]],[32,[7]]],[[6,[4,5]]]],[[[2,[1]],9,8,8],[[6,[4,5]]]],[[[2,[1]],9,8],[[6,[4,5]]]],[[[2,[1]],9,[32,[7]]],[[6,[4,5]]]],[[[2,[1]],9,8],[[6,[4,5]]]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[14,-1,[]],[14,-1,[]],[[[2,[[4,[1,1]]]],9,8,8,8],[[6,[4,5]]]],[[[2,[[4,[1,1]]]],9,[32,[7]],8,8],[[6,[4,5]]]],[[[2,[[4,[1,1]]]],9,33,34,9,[2,[[4,[1,1]]]]],[[6,[4,5]]]],[[[2,[[4,[1,1]]]],9,9,8,8],[[6,[4,5]]]],[14,4],[[33,7,35],[[37,[[6,[36,22]]]]]],[1,[[6,[[4,[1,1]],5]]]],[-1,-1,[]],[[],[[6,[38,5]]]],[[],14],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[2,[[4,[1,1]]]],8,8],[[6,[4,5]]]],[[33,7,34,35,[2,[[4,[1,1]]]]],[[6,[[4,[[32,[1]],[32,[1]]]],5]]]],[36,[[30,[-1]]],[]],[[7,33],[[30,[1]]]],[[],[[6,[4,5]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,17,[]],0,0,0,0,[[7,14],14],[[[2,[1]],1],4],[[[2,[[4,[1,1]]]],1,7],4],[[7,13],1],[[[32,[1]]],1],[7,1],0],"c":[],"p":[[5,"String",222],[5,"Sender",223],[5,"AppConfig",61],[1,"tuple"],[6,"LibError",97],[6,"Result",224],[1,"str"],[5,"FileTxt",138],[5,"Path",225],[10,"AppStateMethods",61],[5,"Box",226],[5,"MutexGuard",227],[1,"u16"],[1,"usize"],[5,"Formatter",228],[8,"Result",228],[5,"TypeId",229],[6,"Error",230],[6,"VarError",231],[5,"FromUtf8Error",222],[6,"InquireError",232],[6,"ListFolderError",233],[6,"Error",234],[5,"Error",235],[5,"Error",236],[5,"Error",237],[6,"GetMetadataError",233],[5,"DecryptionError",238],[10,"Error",239],[6,"Option",240],[8,"Result",236],[5,"Vec",241],[5,"UserAuthDefaultClient",242],[1,"i32"],[1,"bool"],[5,"DirectoryIterator",172],[8,"Result",234],[5,"Authorization",243],[8,"ThreadName",159],[8,"FolderList",172],[8,"FileList",172],[8,"ThreadName",172],[8,"MasterKey",172],[8,"TokenEnc",172],[8,"ThreadName",214]],"b":[[117,"impl-Debug-for-LibError"],[118,"impl-Display-for-LibError"],[119,"impl-From%3CTimestampError%3E-for-LibError"],[120,"impl-From%3CVarError%3E-for-LibError"],[121,"impl-From%3CFromUtf8Error%3E-for-LibError"],[122,"impl-From%3CInquireError%3E-for-LibError"],[123,"impl-From%3CListFolderError%3E-for-LibError"],[124,"impl-From%3CError%3E-for-LibError"],[125,"impl-From%3CError%3E-for-LibError"],[126,"impl-From%3CError%3E-for-LibError"],[127,"impl-From%3CError%3E-for-LibError"],[128,"impl-From%3CGetMetadataError%3E-for-LibError"],[129,"impl-From%3CDecryptionError%3E-for-LibError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
