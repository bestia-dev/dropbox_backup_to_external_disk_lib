searchState.loadedDescShard("dropbox_backup_to_external_disk_lib", 0, "dropbox_backup_to_external_disk_lib\nGlobal variable to store the Application state.  \\\nThis trait defines what functions must the bin project …\nContains the error value\ndropbox_backup_to_external_disk_lib::Error\nMy object to work with text files.\nContains the success value\ndropbox_backup_to_external_disk_lib::Result\nChange time of files.\nCompare list: the lists and produce list_for_download, …\nCompare folders and write folders to trash into …\nCreate new empty folders.\nDownload files from list.  \\\nDownload one file is calling internally download_from_vec. …\nApplication state (static) is initialized only once in the …\ndecrypt dropbox api token from file or use the oauth2 “…\nThis is a short-lived token, so security is not my primary …\nGeneric functions to encrypt and decrypt secrets using the …\nI am using the crate thiserror to create an enum for all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the global app state.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe logic is in the LIB project, but all UI is in the CLI …\nGet remote list in parallel.  \\\nget encrypted authorization token from env var\nModule contains all functions for local external disk.\nget locked Mutex\nFiles are often moved.  \\\nThe backup files must not be readonly to allow copying the …\nreference to app_config data\nModule contains all the communication with the remote …\nFiles are often renamed.  \\\nShorten path for screen to avoid word-wrap.\nSort string lines case insensitive.\nTest authentication with dropbox.com.  \\\nMove to trash folder the files from list_for_trash_files.  …\nMove to trash folder the folders from …\nA module with often used functions.\nGlobal variable to store the Application state.  \\\nThis trait defines what functions must the bin project …\nReturns the global app state.\nget encrypted authorization token from env var\nget locked Mutex\nreference to app_config data\nCompare list: the lists and produce list_for_download, …\nCompare folders and write folders to trash into …\nCompare list: the lists must be already sorted for this to …\nANSI color\nApplication state (static) is initialized only once in the …\nANSI color\nANSI color\nANSI color\nANSI color\nOauth2 PKCE code flow needs to be authenticated with a …\nAKA app_name\ndecrypt text with metadata\nApplication state (static) is initialized only once in the …\nencrypt and save file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStart the dropbox oauth2 PKCE code workflow It will use …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nuse refresh token to get new access_token and refresh_token\nANSI color\nStruct that represents the json data saved in the ‘*.enc…\nANSI color\nANSI color\nANSI color\nANSI color\nDecode base64 from string to 32bytes.\nDecode base64 from string to string.\nDecrypts plain_encrypted_string with …\nDecode base64 from string to 32bytes.\nEncode base64 from bytes to string.\nEncode base64 from string to string.\nEncrypts symmetrically secret_string_to_encrypt with …\nReturn true if file exists on path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet reference to tilde file path CrossPathBuf.\nGet reference to file name.\nGet full file path.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrivate key file path: CrossPathBuf have tilde. Later it …\nGet the string from the file that is base64 encoded.\nGenerate a random seed.\nShorten the <code>Vec&lt;u8&gt; to [u8;32]</code>.\nSign the seed with the private key into 32 bytes secret.\nSign seed with ssh-agent into 32 bytes secret.\nReturns the secret signed seed.\nContains the error value\ndropbox_backup_to_external_disk_lib::Error\nContains the success value\ndropbox_backup_to_external_disk_lib::Result\nMy object to work with text files.\nEmpty the file.\nReturns the final component of the Path, if there is one.\nReturns file path.\nIf file not exist, returns error.\nIf file not exist, it creates it.\nThis method is similar to fs::read_to_string, but instead …\nAppend str to file.\nChange time of files.\nCreate new empty folders.\nThe logic is in the LIB project, but all UI is in the CLI …\nInternal code to move file.\nFiles are often moved.  \\\nThe backup files must not be readonly to allow copying the …\nFiles are often renamed.  \\\nMove to trash folder the files from list_for_trash_files.  …\nInternal function.\nMove to trash folder the folders from …\nIterator for Directory on remote Dropbox storage.\nDownload files from list.  \\\nDownload one file with client object …\nDownload one file is calling internally download_from_vec. …\nDropbox function to list folders.\nThis is a short-lived token, so security is not my primary …\nReturns the argument unchanged.\nRead encoded token (from env), decode and return the …\nCalls <code>U::from(self)</code>.\nGet remote list in parallel.  \\\nList remote folder.\nTest authentication with dropbox.com.  \\\nIt is used for substring, because string slice are counted …\nPrintln_to_ui_thread sends the string to ui thread and …\nPrintln_to_ui_thread_with_thread_name sends the string to …\nShorten path for screen to avoid word-wrap.\nSort list case insensitive.\nSort string lines case insensitive.")