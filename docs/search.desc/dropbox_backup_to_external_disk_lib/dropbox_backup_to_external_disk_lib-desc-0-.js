searchState.loadedDescShard("dropbox_backup_to_external_disk_lib", 0, "dropbox_backup_to_external_disk_lib\nGlobal variable to store the Application state.  \\\nThis trait defines what functions must the bin project …\nList of possible errors from this library.\nMy object to work with text files.\nCompare list: the lists and produce list_for_download, …\nCompare folders and write folders to trash into …\nCreate new empty folders.\nDownload files from list.  \\\nDownload one file is calling internally download_from_vec. …\nThis is a short-lived token, so security is not my primary …\nI am using the crate thiserror to create an enum for all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the global app state.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe logic is in the LIB project, but all UI is in the CLI …\nGet remote list in parallel.  \\\nget encrypted authorization token from env var\nModule contains all functions for local external disk.\nget locked Mutex\nFiles are often moved or renamed.  \\\nThe backup files must not be readonly to allow copying the …\nreference to app_config data\nModule contains all the communication with the remote …\nShorten path for screen to avoid word-wrap.\nSort string lines case insensitive.\nTest authentication with dropbox.com.  \\\nMove to trash folder the files from list_for_trash_files.  …\nMove to trash folder the folders from …\nA module with often used functions.\nGlobal variable to store the Application state.  \\\nThis trait defines what functions must the bin project …\nReturns the global app state.\nget encrypted authorization token from env var\nget locked Mutex\nreference to app_config data\nCompare list: the lists and produce list_for_download, …\nCompare folders and write folders to trash into …\nCompare list: the lists must be already sorted for this to …\nList of possible errors from this library.\nMy object to work with text files.\nEmpty the file.\nReturns the final component of the Path, if there is one.\nReturns file path.\nIf file not exist, returns error.\nIf file not exist, it creates it.\nThis method is similar to fs::read_to_string, but instead …\nAppend str to file.\nCreate new empty folders.\nThe logic is in the LIB project, but all UI is in the CLI …\nInternal code to move file.\nFiles are often moved or renamed.  \\\nThe backup files must not be readonly to allow copying the …\nMove to trash folder the files from list_for_trash_files.  …\nInternal function.\nMove to trash folder the folders from …\nIterator for Directory on remote Dropbox storage.\nDownload files from list.  \\\nDownload one file with client object …\nDownload one file is calling internally download_from_vec. …\nDropbox function to list folders.\nThis is a short-lived token, so security is not my primary …\nReturns the argument unchanged.\nRead encoded token (from env), decode and return the …\nCalls <code>U::from(self)</code>.\nGet remote list in parallel.  \\\nList remote folder.\nGet content_hash from remote.\nTest authentication with dropbox.com.  \\\nIt is used for substring, because string slice are counted …\nPrintln_to_ui_thread sends the string to ui thread and …\nPrintln_to_ui_thread_with_thread_name sends the string to …\nShorten path for screen to avoid word-wrap.\nSort list case insensitive.\nSort string lines case insensitive.")